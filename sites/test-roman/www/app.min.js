require.config({
    baseUrl: "js/",
    config: {
        app: {
            debug: !0
        },
        game: {
            debug: !0
        },
        socket: {
            link: "http://" + window.location.hostname + ":9999",
            resource: "s"
        }
    },
    shim: {
        jquery: {
            exports: "$"
        }
    },
    paths: {
        "socket.io": [ "//" + window.location.hostname + ":9999/s/socket.io", "//cdn.socket.io/stable/socket.io" ],
        jquery: "//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min",
        "google-font": "//ajax.googleapis.com/ajax/libs/webfont/1/webfont",
        keypress: "/js/lib/keypress"
    }
}), define("app", [ "require", "exports", "module", "pages" ], function(e, t, n, x) {
    alert(1)
    var r = e("pages"), i = n.config();
    console.isDebug = i.debug;
    var s = document.getElementsByTagName("body")[0].id.replace("page-", ""), o = r[s];
    if ("undefined" == typeof o) {
        window.location = "/";
        return;
    }
    
o.init();
}), require([ "jquery", "google-font" ]), log = function() {
    console.isDebug && !0 && console && console.log.apply(console, arguments);
}, random = function(e, t) {
    return Math.floor(Math.random() * (t - e + 1)) + e;
}, define("../app", function() {}), define("events", [ "require", "exports", "module" ], function(e, t, n) {
    alert(1);var r = function() {
        var e = this;
        this.events = {}, this.addListener = function(t, n) {
            if (typeof t == "object") {
                for (var r in t) e.addListener(t[r], n);
                return;
            }
            return e.events.hasOwnProperty(t) || (e.events[t] = []), log("add event: " + t), e.events[t].push(n), e;
        }, this.hasListener = function(t) {
            return e.events.hasOwnProperty(t) ? !0 : !1;
        }, this.removeEvent = function(t, n) {
            if (!e.hasListener(t)) return;
            return log("remove event: " + t), delete e.events[t], e;
        }, this.removeListener = function(
t, n) {
            if (!e.hasListener(t)) return;
            log("remove event callback: " + t);
            var r = e.events[t];
            for (var i in r) r[i] === n && e.events[t].splice(i, 1);
            return e;
        }, this.dispatch = function(t, n) {
            if (!e.hasListener(t)) {
                log("dispatch event NOT: " + t + " ...", n);
                return;
            }
            log("dispatch event: " + t);
            var r = e.events[t];
            for (var i in r) r[i](n);
            return e;
        };
    };
    return new r;
}), define("socket", [ "require", "exports", "module", "socket.io", "events" ], function(e, t, n) {
    alert(12);var r = e("socket.io"), i = e("events"), s = n.config(), o = function() {
        var e = this;
        e.connect = function() {
            e.socket = r.connect(s.link, {
                resource: s.resource || "socket.io"
            }), e.socket.on("connect", function() {
                i.dispatch("socket.connect");
            
}), e.socket.on("connecting", function() {
                i.dispatch("socket.connecting");
            }), e.socket.on("disconnect", function() {
                i.dispatch("socket.disconnect");
            }), e.socket.on("connect_failed", function() {
                i.dispatch("socket.connect_failed");
            }), e.socket.on("error", function() {
                i.dispatch("socket.error");
            }), e.socket.on("message", function(e, t) {
                i.dispatch("socket.message", [ e, t ]);
                if (typeof e == "object" && e.hasOwnProperty("event")) {
                    var n = e.event;
                    i.dispatch("socket.event " + n, e, t);
                }
            }), e.socket.on("reconnect_failed", function() {
                i.dispatch("socket.reconnect_failed");
            }), e.socket.on("reconnect", function() {
                i.dispatch("socket.reconnect");
            }), e.socket.on("reconnecting", function() {
                i.dispatch
("socket.reconnecting");
            });
        }, e.send = function(t, n) {
            e.socket.emit(t, n);
        }, e.message = function(t) {
            e.send("message", t);
        };
    };
    return o;
}), define("game", [ "require", "exports", "module", "jquery", "events", "socket", "keypress" ], function(e, t, n) {
    alert(133);var r = e("jquery"), i = e("events"), s = e("socket"), o = e("keypress"), u = function(e) {
        var t = this;
        t.config = n.config(), t.data = {}, t.init = function() {
            log("game init"), t.preloadResources(), t.bindEvents(), t.redraw(), t.start();
        }, this.preloadResources = function() {}, t.start = function() {
            log("game start"), t.sock = new s, t.sock.connect();
        }, t.redraw = function() {
            $("#area").width(t.data["area.width"]), $("#area").height(t.data["area.height"]), t.data.me && ($("#area #player_me").remove(), $("#area").append($("<div/>").attr("id", "player_me").addClass("player").addClass(
t.data.me.hero).css("left", t.data.me.pos.x).css("top", t.data.me.pos.y)));
        }, t.bindEvents = function() {
            var e = "20px";
            keypress.combo("left", function() {
                $("#area #player_me").css({
                    left: "-=" + e
                }), t.sock.message({
                    event: "move",
                    direction: "left"
                });
            }), keypress.combo("right", function() {
                $("#area #player_me").css({
                    left: "+=" + e
                }), t.sock.message({
                    event: "move",
                    direction: "right"
                });
            }), keypress.combo("up", function() {
                $("#area #player_me").css({
                    top: "-=" + e
                }), t.sock.message({
                    event: "move",
                    direction: "up"
                });
            }), keypress.combo("down", function() {
                $("#area #player_me"
).css({
                    top: "+=" + e
                }), t.sock.message({
                    event: "move",
                    direction: "down"
                });
            }), i.addListener([ "socket.connecting", "socket.reconnecting" ], function() {
                $("body").addClass("loading");
            }), i.addListener([ "socket.connect", "socket.reconnect" ], function() {
                $("body").removeClass("loading");
            }), i.addListener("socket.event set", function(e, n) {
                var r = e.params;
                for (var i in r) {
                    var s = r[i];
                    t.data[i] = s, log('game set "' + i + '" = "' + s + '"');
                }
                t.redraw();
            }), i.addListener("socket.event user.connected", function(e, t) {
                var n = e.user, r = $("<div/>").attr("id", "player_" + n.uid).addClass("player").addClass(n.hero).css("left", n.pos.x).css("top", n.pos.y);
                $("#area").append
(r);
            }), i.addListener("socket.event user.disconnected", function(e, t) {
                var n = e.user;
                $("div#player_" + n.uid).remove();
            }), i.addListener("socket.event user.move", function(t, n) {
                var r = t.uid, i = t.direction, s = $("#player_" + r);
                "left" == i ? s.css({
                    left: "-=" + e
                }) : "right" == i ? s.css({
                    left: "+=" + e
                }) : "up" == i ? s.css({
                    top: "-=" + e
                }) : "down" == i && s.css({
                    top: "+=" + e
                });
            });
        };
    };
    return u;
}), define("pages", [ "require", "exports", "module", "jquery", "game" ], function(e, t, n) {
    alert(133312);var r = e("jquery"), i = e("game"), s = {
        welcome: {
            init: function() {
                $("#play").on("click", function() {
                    location = "/game";
                });
            }
        
},
        game: {
            init: function() {
                (new i).init();
            }
        }
    };
    return s;
});;